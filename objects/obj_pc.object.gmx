<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pc</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.pc_x_to!=-1
{
    x=global.pc_x_to
    y=global.pc_y_to
    
    global.pc_x_to=-1
    global.pc_y_to=-1


}




image_xscale=global.pc_xscale_to
global.pc_xscale_to=1





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init


invincible=0
dash=0


create_shockwave=0


xprev=x
yprev=y

view_xview=x-view_wview/2
view_yview=y-view_hview/2//-2
if view_xview&lt;0
view_xview=0
if view_yview&gt;room_height-view_hview
view_yview=room_height-view_hview

camera_stuck=0



timer=0

hit=0


dead=0
dead_timer=60
instadeath=0 //this is turned on right before you get "die" if the blow kills you instantly, regardless of items

levitate=0
levitate_time=0
levitate_timer=30
cant_levitate=0

cant_wallkick=0


midair=0
parafall=0

image_speed=0



aura_timer=global.pc_aura_timer


can_pick_up=1 //whether you can pick up items. Right after picking one up, this is turned off, but reset in begin step event




grav=global.pc_gravity
frict=global.pc_friction
constant_friction=0
gravity_direction=270
jump_time=0
//whether or not you jumped or fell.
jump=0
//how many times you've jumped
jumps=0
jump_automatically=0

wall_kick_turn_around=0

wall_id=0




can_change_directions=1
key_left=0
key_down=0
key_up=0
key_up_pressed=0
key_right=0
release=0


climb_t=0







stunned=0
special_stun=0
crouch_stun=0
will_jump_after_stun=0
ledge_grab_stun=0


will_z_after_stun=0
will_x_after_stun=0




throw=0



on_vertical_moving_platform=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

f=0


with obj_fixed_camera_zone
{
        if other.x&gt;=x
        if other.x&lt;=x+view_wview*size
        {
            view_yview=y
            other.f=y
        }
}


with obj_stuck_camera_zone
{
        if other.x&gt;=x
        if other.x&lt;=x+view_wview//*size
        {
        view_yview=y
        view_xview=x
        }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav=global.pc_gravity_wall_slide
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if dead=0
{
    
    
    sprite_index=spr_pc
    image_index=0
    image_speed=0
    stunned=0
    crouch_stun=0
    
    if will_jump_after_stun=1
    {
        vspeed=-global.pc_jump_power
        jump=1
        will_jump_after_stun=0
    }
    if will_z_after_stun=1
    {
        scr_spell_star()
        will_z_after_stun=0
    }
    if will_x_after_stun=1
    {
        scr_boomerang()
        will_x_after_stun=0
    }


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index+=1

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if dead=0
image_index-=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jump_automatically=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//edge grab pull yourself up / jump away

if dead=0
{

    if instance_exists(wall_id)=0
    {
        stunned=0
        ledge_grab_stun=0
        sprite_index=spr_pc
        jump_time=0
        jump=1
    ///////////////////////
            exit
    ///////////////////////
    }
    

        y-=7
        
        sprite_index=spr_pc_jump
        timer=0
            image_index=0
            
        vspeed=-1.5-keyboard_check(vk_up)*1.5
                if wall_id!=0
                vspeed+=wall_id.vspeed
        jump_time=0
        
        jump=1
    
    
        stunned=0
        ledge_grab_stun=0
    
    
    
    
    if image_xscale=1
    or keyboard_check(vk_right)
    and keyboard_check(vk_left)=0
    {
        hspeed=3
    
    
                if wall_id!=0
                hspeed+=wall_id.hspeed
                
        x+=2
        exit/////////!!!!!!!!!!//////////////////////!!!!!!!!!!!!///////////!!!!!!!!!!//////////////////////!!!!!!!!!!!!///////////
    }
    if image_xscale=-1
    or keyboard_check(vk_left)
    {
        hspeed=-3
    
    
                if wall_id!=0
                hspeed+=wall_id.hspeed
                
        x-=2
        exit///////////!!!!!!!!!!//////////////////////!!!!!!!!!!!!////////////!!!!!!!!!!//////////////////////!!!!!!!!!!!!///////////
    }
    
    

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>special_stun=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_change_directions=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frict=global.pc_friction
constant_friction=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stunned=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//gravity


if grav&gt;0
{
    vspeed+=grav
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer+=1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//view


if dead&gt;0
exit

if dash&gt;0
{
    view_xview=x-120
    if view_xview&gt;room_width-view_wview
    view_xview=room_width-view_wview
    if view_xview&lt;0
    view_xview=0
    
    exit
}




var go;


var centerx, centery;
centerx=view_xview+view_wview/2
centery=view_yview+view_hview/2-16

var center_offset_up, center_offset_down, go;
center_offset_up=16
center_offset_down=-8








//stuck camera


var i;
i=0
go=0
with obj_stuck_camera_zone
{
    if other.x+xt&gt;=x
    if other.x+xt&lt;=x+view_wview
    {
    go=1
    i=id
    }
}

if go
{
    
    with i
    {
        if view_xview&lt;x+xt
        view_xview+=4
        if view_xview&gt;x+xt
        view_xview-=4
        if abs(view_xview-(x+xt))&lt;4
        view_xview=x+xt
        
        if view_yview&lt;y
        view_yview+=1
        if view_yview&gt;y
        view_yview-=1
        if abs(view_yview-y)&lt;1
        view_yview=y
    }
    
    camera_stuck=7
    
    /////////////////////////////////////////////////////////////////////////////////////
                                            exit
    /////////////////////////////////////////////////////////////////////////////////////

}


camera_stuck-=1

if camera_stuck&gt;0
    /////////////////////////////////////////////////////////////////////////////////////
                                            exit
    /////////////////////////////////////////////////////////////////////////////////////
    
    
    
    
    
    
    
    
    
    


//horizontal camera


var rt;
rt=round(x-centerx)/4
if abs(rt)&gt;4
rt=4*sign(rt)

view_xview+=rt
if view_xview&lt;0
view_xview=0
if view_xview&gt;room_width-view_wview
view_xview=room_width-view_wview










//vertical free cam


go=0
with obj_free_camera_zone
{
    if other.x&gt;=x
    if other.x&lt;=x+view_wview*size
    go=1
}


if go
{

    if centery-y&gt;center_offset_up
    if y&lt;room_height-view_hview*3/4
    view_yview+=min(2,round(y+center_offset_up-centery)/12)
    if centery-y&lt;-center_offset_down
    view_yview+=max(-2,round(y-center_offset_down-centery)/12)
    
    //if view_yview&lt;lim2
    //view_yview+=f
    if view_yview&gt;room_height-view_hview
    view_yview=room_height-view_hview
if view_yview&lt;0
view_yview=0
    
    ////////////////////////////////////////////////////////////
                                exit
    ////////////////////////////////////////////////////////////
}


go=0
with obj_free_camera_zone_2
{
    if other.x&gt;=x
    if other.x&lt;=x+view_wview*size
    go=1
}


if go
{

    var horse_shit;
    horse_shit=64
    if centery-y-horse_shit&gt;center_offset_up
    if y-horse_shit&lt;room_height-view_hview*3/4
    view_yview+=min(2,round(y-horse_shit+center_offset_up-centery)/12)
    if centery-y-horse_shit&lt;-center_offset_down
    view_yview+=max(-2,round(y-horse_shit-center_offset_down-centery)/12)
    
    //if view_yview&lt;lim2
    //view_yview+=f
    if view_yview&gt;room_height-view_hview
    view_yview=room_height-view_hview
if view_yview&lt;0
view_yview=0
    
    ////////////////////////////////////////////////////////////
                                exit
    ////////////////////////////////////////////////////////////
}









go=0
        
        
with obj_fixed_camera_zone
{
        
    if other.x&gt;=x
    if other.x&lt;=x+view_wview*size
    {
        go=1
        if other.y&lt;=y+view_hview-32
        other.f=y
        if staged_camera
        if other.y&gt;=y+view_hview-16
        other.f=y+view_hview+stage2_y
    }
}

if go
{
    
    
    if view_yview&lt;f
    view_yview+=1
    if view_yview&gt;f
    view_yview-=1


}






view_xview=round(view_xview)
view_yview=round(view_yview)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if key_left_pressed
move_outside_solid(180,2)
if key_right_pressed
move_outside_solid(0,2)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//parasol item

if global.pc_item="parasol"
if parafall=0
{
    if vspeed&gt;global.item_parasol_terminal_velocity
    vspeed=global.item_parasol_terminal_velocity
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_pick_up=1



xprev=x
yprev=y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//status



hit-=1


if invincible
hit=3


//patch
if sprite_index=spr_pc_ledge_grab
{
grav=0

    if collision_line(x+image_xscale*12,y,x,y,obj_solid_parent,0,1)&lt;0
    {
        stunned=0
        ledge_grab_stun=0
        sprite_index=spr_pc
        jump_time=0
        jump=1
    }
}

//patch
if sprite_index!=spr_pc_ledge_grab
if stunned&lt;=0
ledge_grab_stun=0
        
    
    

//terminal velocity
if vspeed&gt;global.pc_terminal_velocity
vspeed=global.pc_terminal_velocity






//wallkicking

//if sprite_index=spr_pc
//cant_wallkick=0
if vspeed&gt;global.pc_wall_slide_max_speed+1
cant_wallkick=1


if sprite_index=spr_pc_wall_kick
or sprite_index=spr_pc_wall_kick_turn
{



if timer=timer_alarm
{
    sprite_index=spr_pc
    image_speed=0
    image_index=0
    if wall_kick_turn_around=1
    image_xscale=-image_xscale
    
    wall_kick_turn_around=0
}

    

if wall_kick_turn_around=0
{

if timer &lt;= 5
{
    
    if image_xscale=1
    if keyboard_check(vk_left)
    {
        wall_kick_turn_around=1
        sprite_index=spr_pc_wall_kick_turn
        image_speed=3/(timer_alarm-timer)
        image_index=-.5
    }
    if image_xscale=-1
    if keyboard_check(vk_right)
    {
        wall_kick_turn_around=1
        sprite_index=spr_pc_wall_kick_turn
        image_speed=3/(timer_alarm-timer)
        image_index=-.5
    }

}

}



}








//ledge hang time
/*
if sprite_index!=spr_pc_ledge_grab
climb_t=0
else
climb_t+=1

if climb_t&gt;global.pc_ledge_hang_time
{       

        if image_xscale=1
        {
            x-=2
        }
        if image_xscale=-1
        {
            x+=2
        }
        
        sprite_index=spr_pc
        stunned=0
        
}
  */
  
        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//dashing, dashing into enemies


dash-=1
    
if dash=0
//or keyboard_check_released(ord("V"))
{
    speed=global.pc_speed
    dash=0
}







if dash&gt;0
{
    sprite_index=spr_pc_dash
    hit=1
    image_index+=1
    

if dash mod 2 =0
{
    o=instance_create(x,y,obj_particle)
    o.sprite_index=sprite_index
    o.image_index=0
    o.image_speed=0
    o.alarm[0]=max(1,dash)
    o.image_alpha=.5
    o.image_xscale=image_xscale
}



//hurting enemies


    with obj_enemy_par
    if distance_to_object(other)&lt;3
if life&gt;0
{

var f, dmg;
f=damage_modifier_physical
dmg=global.dash_damage

if global.pc_item="staff"
{
    f=damage_modifier_fire
    dmg+=global.dash_damage_fire
}

    
    take_damage
    (
    /*damage*/                  global.pc_magickality*dmg*f
    ,
    /*player-dealt hit*/        1
    ,
    /*type*/                    "physical"
    ,
    /*show hit numbers*/        shows_hit_numbers
    ,
    /*value "hit" is set to*/   8
    ,
    /*at what value can hit*/   0
    )
    
    //o.alpha_loss_rate=1/30
    
}


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//levitation


with obj_block_levitate
        instance_destroy()


    levitate_time+=1
    levitating=0
    
    
    
        
        
//////////////////////////////////////////////

if levitate=0
exit
if cant_levitate //set when you drop from a ledge, when you wallkick, or jump from a ledge, and when you crouch (in animation+crouching)
exit


if sprite_index=spr_pc_crouched
or sprite_index=spr_pc_jump
or sprite_index=spr_pc_fall
or sprite_index=spr_pc_fall_crouched
or sprite_index=spr_pc_ledge_grab
or sprite_index=spr_pc_wall_slide
or sprite_index=spr_pc_wall_kick
or sprite_index=spr_pc_wall_kick_turn
exit

//////////////////////////////////////////////





    
        if place_meeting(x,y+1,obj_solid_parent)=0
        if jump=0
        if levitate
        if levitate_time&lt;=levitate_timer
        {
            o=instance_create(x-8,y+7,obj_block_levitate)
            //o.x+=hspeed
            grav=0
            levitating=1
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//aura

if global.pc_aura=0
exit

if dead&gt;0
exit





if speed!=0
aura_timer=global.pc_aura_timer



var aura_field;
aura_field=3


aura_timer-=1

if aura_timer&lt;=0
{
    if aura_timer mod global.pc_aura_frequency =0 
    global.pc_mana+=1
    //if global.pc_mana&gt;
    
    o=instance_create(round((x-8)/16)*16    +random(16*aura_field)-((aura_field-1)*16/2)     ,floor(y/16)*16 -((floor(random(4))+1)*16)   +random(16)       ,obj_particle)
    o.vspeed=2
    o.image_index=choose(0,1,2)
    o.image_speed=0
    o.sprite_index=spr_mana_rain
    o.image_xscale=1
    o.image_yscale=1
    o.alpha_loss_rate=.03
    o.alarm[0]=1/o.alpha_loss_rate
    
    o.destroyed_off_screen=0
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///item management

/*
if keyboard_check_pressed(ord('C'))
{

    drop_item(1)

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//wall sliding / jumping


if dead&gt;0
exit

if dash&gt;0
exit

if y&lt;view_yview
or y&gt;view_yview+view_hview
or x&lt;view_xview
or x&gt;view_xview+view_wview
exit




if sprite_index=spr_pc_wall_slide
{

if collision_rectangle(x+image_xscale*8,y,x+image_xscale*9,y+4,obj_solid_parent,0,1)&lt;0
or place_meeting(x,y+1,obj_solid_parent) //place_meeting(x,y+6,obj_solid_parent)
or vspeed&gt;global.pc_wall_slide_max_speed+1
{
    sprite_index=spr_pc
    stunned=0
    hspeed=-image_xscale*3
    cant_levitate=1
    
    exit///////////////////////////////////////////////////////////////////////////////
}

}



var go, col;
go=0
col=collision_rectangle(x+image_xscale*5,y,x+image_xscale*3,y-1,obj_solid_parent,0,1)


if sprite_index=spr_pc_wall_slide
go=1

if sprite_index=spr_pc_crouched
or sprite_index=spr_pc_fall_crouched
or vspeed&gt;global.pc_wall_slide_max_speed+1
go=0

if sprite_index!=spr_pc_ledge_grab
if col&gt;0
if place_meeting(x,y+1,obj_solid_parent)=0
go=2

if go!=2
if cant_wallkick
if sprite_index!=spr_pc_wall_slide
go=0


//walljumping

if go&gt;0
{

    if keyboard_check_pressed(vk_up)
    {
        sprite_index=spr_pc_wall_kick
        wall_kick_turn_around=0
        timer=0
        timer_alarm=10
        //reset in status
            image_speed=.25
            image_index=0
            
        stunned=0
        hspeed=-image_xscale*global.pc_wall_kick_power
        if wall_id!=0
        hspeed+=wall_id.hspeed
        //image_xscale=-image_xscale
        
        vspeed=-global.pc_jump_power*3/4
        jump=0 //so you can't jump higher by holding UP when wall kicking
        cant_levitate=1 //so you can't levitate after wall kick
        cant_wallkick=0
        
            frict=global.pc_friction_wall_jump
            //constant_friction=1
            alarm[1]=4
            can_change_directions=0
            alarm[2]=10
        
        exit///////////////////////////////////////////////////////////////////////////////
    }
    
    
    //letting go of wall
    
    if key_left=0
    if key_right=0
    if key_down=0
    release=0
    
    if image_xscale=1
    if keyboard_check(vk_left)
    {
        release+=1
    }
    if image_xscale=-1
    if keyboard_check(vk_right)
    {
        release+=1
    }
    
    if keyboard_check_pressed(vk_down)
    {
        release=1000
    }
    
    
    
    if release&gt;2
    {
        sprite_index=spr_pc_jump
        timer=0
        hspeed=-image_xscale*3
        
        stunned=0
        cant_levitate=1
        cant_wallkick=0
        
        release=0
        
        exit///////////////////////////////////////////////////////////////////////////////
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//movement and jumping



key_left=keyboard_check(vk_left)
key_left_pressed=keyboard_check_pressed(vk_left)
key_right=keyboard_check(vk_right)
key_right_pressed=keyboard_check_pressed(vk_right)
key_up_pressed=keyboard_check_pressed(vk_up)
key_up=keyboard_check(vk_up)
key_down=keyboard_check(vk_down)



////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
if sprite_index=spr_pc_ledge_grab
or sprite_index=spr_pc_wall_slide
exit

if dash&gt;0
exit

if special_stun=1
exit
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////










//movement left and right

            if dead=0
            {



if key_down=0
or grav&gt;0
{

if stunned=0
{

var maxspeed;
maxspeed=global.pc_speed
/*
if keyboard_check(ord('C'))
maxspeed=global.pc_speed_run*/

    //left
    if key_left
    {
        if can_change_directions
        image_xscale=-1
        
        //repeat(   global.pc_speed-  ( (global.pc_speed-1) *keyboard_check_pressed(vk_left) )   )
        if place_meeting(x-global.pc_accel,y,obj_solid_parent)=0
        {
            if hspeed&gt;-maxspeed
            hspeed-=global.pc_accel
        }
        else
        //grab ledges
        {
            if position_meeting(x-5,y,obj_solid_parent)
            if position_meeting(x-5,y-16,obj_solid_parent)=0
            if position_meeting(x-5,y-4,obj_solid_parent)=0
            hspeed-=global.pc_accel
        }
    }
    
    //right
    else
    if key_right
    {
        if can_change_directions
        image_xscale=1
        
        //repeat(   global.pc_speed-  ( (global.pc_speed-1) *keyboard_check_pressed(vk_right) )   )
        if place_meeting(x+global.pc_accel,y,obj_solid_parent)=0
        {
            if hspeed&lt;maxspeed
            hspeed+=global.pc_accel
        }
        else
        //grab ledges
        {
            if position_meeting(x+4,y,obj_solid_parent)
            if position_meeting(x+4,y-16,obj_solid_parent)=0
            if position_meeting(x+4,y-4,obj_solid_parent)=0
            hspeed+=global.pc_accel
        }
    }



}

}




    if ledge_grab_stun=0
    if key_left=0 and key_right=0 or constant_friction or sprite_index=spr_pc_crouched
    {
        if abs(hspeed)&lt;=frict
        hspeed=0
        hspeed-=sign(hspeed)*frict
        
        
        //rounding x when you stop moving
        if hspeed=0
        {
            x=round(x)
        }
    }



            }







            //debug
            if midair
            if jumps=0
            jumps=1


//jumping
if place_meeting(x,y+1,obj_solid_parent)=0
{
    jump_time+=1
    if jump_time&gt;=2
    or position_meeting(x+image_xscale*14,y+8,obj_solid_parent)=0
    {

        
    if sprite_index!=spr_pc_ledge_grab
    midair=1
    
    grav=global.pc_gravity
    
        if dead=0
        //holding up key while in midair lets you jump higher
        if jump=1 //if you jumped, instead of just falling or walking off a cliff
        if key_up
        {
            if stunned=0
            if jump_time&lt;global.pc_jump_power_time+global.pc_jump_power_time_inc*min(global.pc_aerobatics_jump_height_cap,global.pc_aerobatics)
            {
            vspeed-=global.pc_jump_power_add
            }
        }
        /*
    else
    if key_down
    {
        gravity=global.pc_gravity_quickfall
    }*/
    
    }
}

else
{


    midair=0
    parafall=0
    
    wall_kick_turn_around=0
    grav=0
    jump_time=0
    jumps=0
    
    if position_meeting(x,y+6,obj_solid_parent)
    {
        var ip;
        ip=instance_place(x,y+6,obj_solid_parent)
        
        if ip.object_index!=obj_block_levitate
        if ip.y=y+7
        {
            levitate_time=0
            cant_levitate=0
            cant_wallkick=0
        }
    }

}




if midair
{
if key_up_pressed
{
    jump_automatically=1
    alarm[7]=2
}
}


    /////
            /////
            if midair
            if key_up=0
            {
                var v;
                v=.4
                if vspeed&lt;-v
                vspeed+=v
            }
            /////
    /////

//initiating jump
if sprite_index!=spr_pc_wall_kick
if sprite_index!=spr_pc_wall_kick_turn
if dead=0
{
var go;
go=0
if vspeed&gt;=0
if jump_time&lt;=global.pc_jump_time_forgiveness
go=1
if on_vertical_moving_platform
go=1
if go=0
if global.pc_aerobatics&gt;1
if global.pc_aerobatics&gt;jumps
//if global.pc_mana&gt;=1
go=2

if go&gt;0
    {
    
    if key_up_pressed
    or jump_automatically
    {
        if stunned=0
        {
            var vspds, col;
            vspds=0
            col=collision_line(x,y+1,x,y+9,obj_vert_moving_platform_par,0,1)
            if col&gt;0
            vspds=col.vspeed
            vspeed=-global.pc_jump_power+vspds
            
            /*if jumps&gt;0
            {
                vspeed=-global.pc_jump_power_rainbow
            }*/
            
            jump=1
            jumps+=1
            
            jump_automatically=0
            
            if go=2
            {
                //global.pc_mana-=1
                jump_time=1000
            }
        }
        else
        if crouch_stun=1
        will_jump_after_stun=1
    }
    
    }
    
}







if midair
if key_down
{
    if global.pc_item="parasol"
    {
        parafall=1
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//edge grab / jump


if dead&gt;0
exit
    if special_stun!=0
    exit




if sprite_index=spr_pc_ledge_grab
{
    
    var go;
    go=0
    
    if keyboard_check_pressed(vk_down)
    {
        release=1000
        go=2
    }
    
    if image_xscale=-1
    {
        if keyboard_check_pressed(vk_left)
        {
            go=1
        }
        else
        if keyboard_check(vk_right)
        {
            go=2
        }
    }
    else
    {
        if keyboard_check(vk_left)
        {
            go=2
        }
        else
        if keyboard_check_pressed(vk_right)
        {
            go=1
        }
    }
    
    
    if keyboard_check_pressed(vk_up)
    go=1
    
    if image_index!=0
    go=0
    
    
    if go=1
    {
        image_index+=1
        
        alarm[9]=3
        alarm[6]=6
    }
    else
    if go=2
    {
    release+=1
    if release&gt;2
    {
        if image_xscale=1
        {
        x-=2
        }
        if image_xscale=-1
        {
        x+=2
        }
        
        sprite_index=spr_pc
        cant_levitate=1
        stunned=0
        ledge_grab_stun=0
        release=0
    }
    }
    else
    release=0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//moving platforms


if dead&gt;0
exit


//grabbed on / wall sliding

if sprite_index=spr_pc_ledge_grab
or sprite_index=spr_pc_wall_slide
{
    if instance_exists("wall_id")
    {
        hspeed=wall_id.hspeed
        y+=wall_id.vspeed
    }
    
    
    
    exit
}

if dash&gt;0
exit




wall_id=0



on_vertical_moving_platform=0


//moving platforms below you

if midair=0
{
    var col;
    col=collision_rectangle(x-2,y+2,x+2,y+9,obj_solid_parent,0,1)
    if col&gt;0
    {
        if col.hspeed!=0
        {
            x+=col.hspeed
    
        }
    }
}

    col=collision_rectangle(x-4*image_xscale,y+2,x+3*image_xscale,y+8,obj_vert_moving_platform_par,0,1)
    if col&gt;0
    {
        if col.vspeed!=0
        {
            y+=(col.vspeed)
            grav=0
            
            on_vertical_moving_platform=1
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//patch

if image_index=0
if sprite_index=spr_pc_ledge_grab
{
    if position_meeting(x+image_xscale*8,y,obj_solid_parent)=0
    if collision_line(x,y,x,y+12,obj_vert_moving_platform_par,0,1)&gt;0
    {
        //reset PC
        sprite_index=spr_pc
        stunned=0
        image_index=0
        image_speed=0
        alarm[6]=0
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//animation, crouching + crouching off ledges



////////////////////////////////////////////////////////////////////////
    if dead&gt;0 exit
    
    if dash&gt;0 exit
    
////////////////////////////////////////////////////////////////////////



///////SPRITES






if stunned=0
{


//reset sprite (sprite is also reset in grav check below)
if sprite_index!=spr_pc_wall_kick
if sprite_index!=spr_pc_wall_kick_turn
sprite_index=spr_pc

if key_down
if grav=0
{
    if sprite_index!=spr_pc_fall_crouched
    {
        sprite_index=spr_pc_crouched
        cant_levitate=1
        //hspeed=0
                    
            
            
//sliding off edges with crouch


var col_id;
col_id=collision_rectangle(x,y+8,x+1,y+9,obj_solid_parent,0,1)

        if place_meeting(x,y+1,obj_solid_parent)=1
        {
            if position_meeting(x+3,y+8,obj_solid_parent)=0
            if position_meeting(x+5,y+8,obj_solid_parent)=0
            if position_meeting(x-8,y+8,obj_solid_parent)=1
            {
                hspeed=-3
                vspeed=0
                if col_id&gt;0
                {
                hspeed+=col_id.hspeed
                }
                
                ip=instance_position(x-8,y+8,obj_solid_parent)
                x=ip.x+16+7-hspeed
                y=ip.y
                
                image_xscale=-1
                stunned=1
                ledge_grab_stun=1
                special_stun=1
                alarm[3]=5
                //alarm[0]=1
                
                ////////////////////////////////////////////////////////////////
                                                exit
                ////////////////////////////////////////////////////////////////
            }
            
            if position_meeting(x-3,y+8,obj_solid_parent)=0
            if position_meeting(x-5,y+8,obj_solid_parent)=0
            if position_meeting(x+8,y+8,obj_solid_parent)=1
            {
                hspeed=3
                vspeed=0
                if col_id&gt;0
                {
                hspeed+=col_id.hspeed
                }
                
                
                ip=instance_position(x+8,y+8,obj_solid_parent)
                x=ip.x-7-hspeed
                y=ip.y
                
                
                image_xscale=1
                stunned=1
                ledge_grab_stun=1
                special_stun=1
                alarm[3]=5
                //alarm[0]=1
                
                ////////////////////////////////////////////////////////////////
                                                exit
                ////////////////////////////////////////////////////////////////
            }
        }


    }
}
    
    
if sprite_index!=spr_pc_wall_kick
if sprite_index!=spr_pc_wall_kick_turn
if sprite_index!=spr_pc_tumbling
    if grav&gt;0
    if jump_time&gt;4
    if on_vertical_moving_platform=0
{
    if vspeed&gt;1.2
    sprite_index=spr_pc_fall
    else
    sprite_index=spr_pc_jump
}


}






////walking animation



if stunned=0
{

if sprite_index=spr_pc
{
    if key_left
    or key_right
    {
        image_index+=global.pc_image_speed
    }
    else
    image_index=.4
}
if sprite_index=spr_pc_fall or sprite_index=spr_pc_jump
{
    image_index+=global.pc_image_speed_jump
}

}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if key_down
if midair
create_shockwave=1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dead



/*

if dead&gt;0
dead+=1

if dead&gt;dead_timer
{

    global.pc_mana=global.pc_mana_max
    obj_ctrl.game_time=0
    
    
    game_restart()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
x=xprevious
y=yprevious
*/

dash=min(0,dash)


    if levitating=0
    or abs(vspeed)&gt;global.pc_wall_slide_max_speed+1
    cant_levitate=1



////////////////////////////////////////////////////////////////////////////////////
if sprite_index=spr_pc_ledge_grab
exit

if dead exit


if sprite_index=spr_pc_tumbling
//if vspd&gt;global.pc_tumble_death_speed
scr_die(1,-1)
////////////////////////////////////////////////////////////////////////////////////


//



/*
if place_meeting(x+hspeed,y,obj_slope_parent)
if place_meeting(x+hspeed,y-3,obj_slope_parent)=0
{
    while place_meeting(x+hspeed,y,obj_slope_parent)
    y-=1
}

*/


//










//

var xb, yb, cot;
xb=x
yb=y
y=yprev
x=xprev

cot=0
    x+=hspeed
if place_meeting(x+hspeed,y+other.vspeed,other)
{
    cot=1
    x=xprev
}
else
{
    x=xb
    y+=vspeed
    if place_meeting(x,y+vspeed+other.vspeed,other)
    cot=2
    y=yprev
}

if cot=0
or place_meeting(x,y+other.vspeed,other)
{
x=xprev
y=yprev
}



//moves player to contact the wall
{
        move_contact_object(direction,speed,obj_solid_parent)
        x=round(x)
        y=round(y)
}







//to make it so that if you're hauling ass from the wallkick move, you don't keep moving at the same ridiculous speed when you land
if abs(hspeed)&gt;global.pc_speed
hspeed=global.pc_speed*sign(hspeed)


//when you collide with the side of a moving platform, it pushes you
if dead=0
if other.hspeed!=0
{
    x+=other.hspeed
    if y!=other.y-7
    y+=3
}


/*
// to help you "step up" ledges you almost landed on
var stepped_up; stepped_up=0
//if other.object_index!=obj_zob
if y&gt;other.y-7
if y&lt;other.y-4
{
    y=other.y-7
    stepped_up=1
}*/



    jump=0
    


/////
var vspd, hspd;
vspd=vspeed
hspd=hspeed

if y=other.y+16+6
or y=other.y+16+2
{
    vspeed=0

    //vspeed=other.vspeed
}
else
if abs(y-(other.y-7))&lt;=1
{
    vspeed=0
    //vspeed=other.vspeed
    
    /*hspeed=hspeed/2
    if hspeed&lt;1.25
    hspeed=0*/
}
else
{
speed=0
if other.vspeed!=0
y+=other.vspeed
}

grav=0
/////




////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

if dead&gt;0
exit

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////





/*
if stepped_up=1
{
hspeed=image_xscale*global.pc_speed
}*/




                     //edge grab / wall slide / running up walls





//if abs(vspd)&lt;=global.pc_fall_speed_crouch2

////
    {
////

///////////////////EDGE GRAB///////////////////////////

var go, ib;
go=0
ib=image_xscale


    if wall_kick_turn_around
    {
        ib=-image_xscale
    }

    if x&lt;other.x
    and ib=1
    go=1
    if x&gt;other.x+16
    and ib=-1
    go=2
    
    
    with other
    {
        if collision_rectangle(x+3,y-12,x+8,y-2,obj_solid_parent,0,1)&gt;0
        go=0
    }
    
    //
    {
        if collision_rectangle(x-4*image_xscale,y-11 /*was 16; caused bug*/,x,y-8,obj_solid_parent,0,1)&gt;0
        go=0
    }


if go!=0
{
    
   var xs, ys;
   
   xs=-ib*16
    
    ys=1
    with other
    {
    if position_meeting(x+xs,y+16,obj_solid_parent)
    if position_meeting(x,y+16,obj_solid_parent)
    ys=0
    }

if y&lt;other.y+5+ys
and y&gt;other.y-7 //this is necessary to prevent you from grabbing the floor
or ledge_grab_stun
{

    if wall_kick_turn_around
    {
        image_xscale=-image_xscale
    }

    y=other.y
    
    wall_id=other.id
    hspeed=other.hspeed
    
    
    sprite_index=spr_pc_ledge_grab
    alarm[8]=-1
    alarm[9]=-1
    alarm[10]=-1
    
    wall_kick_turn_around=0
    
    
    midair=0
    
    image_index=0
    image_speed=0
    
    stunned=1
    crouch_stun=0
    
    speed=0
    grav=0
    
    
    if go=1
    x=other.x-5
    if go=2
    x=other.x+16+4
    
    
    ////////////////////////////////////////////////////////////////////////////////
                                        exit
    ////////////////////////////////////////////////////////////////////////////////
    
    //alarm[7]=3+abs(vspd)
    
}

}


}






//////////////////////////WALL SLIDE//////////////////////////////////////


if sprite_index!=spr_pc_ledge_grab //patch
if abs(vspd)&lt;=global.pc_wall_slide_max_speed_grab

////
    {
////



var xt, col;
xt=image_xscale*16
if wall_kick_turn_around
xt=image_xscale*-16

col=collision_rectangle(x+xt,y-6,x+xt/2,y+4,obj_solid_parent,0,1)


if col&gt;0
if col.x&gt;=0
if collision_line(x,y+4,x,y+11,obj_solid_parent,0,1)&lt;0
{

    var go;
    go=0
    
    
    if x&lt;other.x
    if xt&gt;0
    //or sprite_index=spr_pc_wall_kick_turn
    go=1
    if x&gt;other.x+16
    if xt&lt;0
    //or sprite_index=spr_pc_wall_kick_turn
    go=2
    
    
    
    
    
    if go!=0
    {

    if go=1
    {
    x=other.x-5
    image_xscale=1
    }
    if go=2
    {
    x=other.x+16+4
    image_xscale=-1
    }
    
    
        sprite_index=spr_pc_wall_slide
        
        wall_id=other.id
        hspeed=other.hspeed
    
        
        image_index=0
        image_speed=0
    
        stunned=1
        speed=0
        alarm[11]=18
    
    
    
    ////////////////////////////////////////////////////////////////////////////////
                                        exit
    ////////////////////////////////////////////////////////////////////////////////
    
    }
    
    
    
}







////
    }
////


/*
//tumbling down

if abs(vspd)&gt;global.pc_fall_speed_crouch1
        if place_meeting(x,y+6,obj_solid_parent)=0
        {
            sprite_index=spr_pc_tumbling
            vspeed=vspd*2/5
            hspeed=-hspd*3/5
            crouch_stun=0
            //image_speed=.25
        }
        
        */
        
        
        
        
        
        
        
        

//////////////CROUCHING FROM HIGH FALLS///////////////

//if sprite_index!=spr_pc_ledge_grab
{

if vspd&gt;global.pc_fall_speed_crouch1
{
    //if y=other.y-7
    {
        alarm[10]=6+round(sqr(vspd-9)*2/3)
        if vspd&gt;global.pc_fall_speed_crouch2
        {
            alarm[9]=3
            alarm[8]=alarm[10]-3
        }
        
        sprite_index=spr_pc_fall_crouched
        stunned=1
        crouch_stun=1
        image_index=0
        
        speed=0
        
    }
    
    /*
    ////////DYING OF FALL DAMAGE////////////////////////////
    if vspd&gt;global.pc_fall_death_speed
    {
        dead=1
        
        speed=0
        
        if place_meeting(x,y+6,obj_solid_parent)=0
        {
            sprite_index=spr_pc_tumbling
            vspeed=vspd*2/5
            hspeed=-hspd*3/5
            crouch_stun=0
            //image_speed=.25
        }
        else
        scr_die(0,6)
        
        /////////////////////////////////////////////////////////////////////////////////
                                    exit
        /////////////////////////////////////////////////////////////////////////////////
        
    }
    */
    
}

}

//


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspeed=-5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hit&gt;0
if hit mod 2 = 0
exit


var xt;
xt=0
if image_xscale=-1
xt=-.1+1


var sprite_drawn, index_drawn;
sprite_drawn=sprite_index
index_drawn=image_index





if global.pc_item="parasol"
{
    if sprite_index=spr_pc
    sprite_drawn=spr_pc_parasol
    if sprite_index=spr_pc_crouched
    sprite_drawn=spr_pc_crouched_parasol
    
    if sprite_index=spr_pc_jump
    {
        if parafall
        sprite_drawn=spr_pc_jump_parasol_down
        else
        sprite_drawn=spr_pc_jump_parasol
    }
    if sprite_index=spr_pc_fall
    {
        if parafall
        sprite_drawn=spr_pc_fall_parasol_down
        else
        sprite_drawn=spr_pc_fall_parasol
    }
    
    if sprite_index=spr_pc_ledge_grab
    sprite_drawn=spr_pc_ledge_grab_parasol
    if sprite_index=spr_pc_wall_kick_turn
    sprite_drawn=spr_pc_wall_kick_turn_parasol
    if sprite_index=spr_pc_wall_kick
    sprite_drawn=spr_pc_wall_kick_parasol
    if sprite_index=spr_pc_wall_slide
    sprite_drawn=spr_pc_wall_slide_parasol
    if sprite_index=spr_pc_fall_crouched
    sprite_drawn=spr_pc_fall_crouched_parasol
}

if global.pc_item="staff"
{
    if sprite_index=spr_pc
    sprite_drawn=spr_pc_staff
    if sprite_index=spr_pc_jump
    sprite_drawn=spr_pc_jump_staff
    if sprite_index=spr_pc_fall
    sprite_drawn=spr_pc_fall_staff
    
    if sprite_index=spr_pc_crouched
    sprite_drawn=spr_pc_crouched_staff
    if sprite_index=spr_pc_fall_crouched
    sprite_drawn=spr_pc_fall_crouched_staff
    
    if sprite_index=spr_pc_ledge_grab
    sprite_drawn=spr_pc_ledge_grab_staff
    if sprite_index=spr_pc_wall_kick_turn
    sprite_drawn=spr_pc_wall_kick_turn_staff
    if sprite_index=spr_pc_wall_kick
    sprite_drawn=spr_pc_wall_kick_staff
    if sprite_index=spr_pc_wall_slide
    sprite_drawn=spr_pc_wall_slide_staff
    
    if sprite_index=spr_pc_dash
    sprite_drawn=spr_pc_dash_staff
    
}




var sprite_drawn_prev;
sprite_drawn_prev=sprite_drawn


if sprite_drawn!=spr_pc_fall_crouched
if sprite_drawn!=spr_pc_ledge_grab
if sprite_drawn!=spr_pc_wall_slide
if throw&gt;0
{
    sprite_drawn=spr_pc_throw
    if global.pc_item="parasol"
    sprite_drawn=spr_pc_throw_parasol
    if global.pc_item="staff"
    sprite_drawn=spr_pc_throw_staff
    
    index_drawn=throw-1
    throw+=1
    if throw&gt;5
    {
    index_drawn=4
    if throw&gt;7
    {
        throw=0
        index_drawn=image_index
        sprite_drawn=sprite_drawn_prev
    }
    }
}




draw_sprite_ext(sprite_drawn,index_drawn,x+xt,y,image_xscale,image_yscale,0,c_white,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_spell_wave()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.pc_boomerang&gt;0
scr_boomerang()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="86">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_spell_lightning()

//scr_spell_flames()

//scr_spell_dash()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart()


/*

obj_ctrl.game_time=0
global.pc_mana=global.pc_mana_max
room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
